# Generated by Django 5.1.2 on 2025-04-11 16:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Affirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affirmation', models.TextField(help_text="Le texte principal de l'affirmation ou la question du QCM.")),
                ('nbr_reponses', models.IntegerField(choices=[(2, 'Vrai/Faux'), (4, 'Choix Multiple (4 options)')], default=2)),
                ('is_correct_vf', models.BooleanField(blank=True, help_text="Pour Vrai/Faux, cochez si l'affirmation est vraie.", null=True)),
                ('option_1', models.TextField(blank=True, help_text="Texte de l'option 1 pour QCM.", null=True)),
                ('option_2', models.TextField(blank=True, help_text="Texte de l'option 2 pour QCM.", null=True)),
                ('option_3', models.TextField(blank=True, help_text="Texte de l'option 3 pour QCM.", null=True)),
                ('option_4', models.TextField(blank=True, help_text="Texte de l'option 4 pour QCM.", null=True)),
                ('reponse_correcte_qcm', models.IntegerField(blank=True, choices=[(1, 'Option 1'), (2, 'Option 2'), (3, 'Option 3'), (4, 'Option 4')], help_text="Numéro de l'option correcte pour QCM (1-4).", null=True)),
                ('explication', models.TextField(blank=True, help_text='Explication de la réponse correcte.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('etudiant', 'Etudiant'), ('encadrant', 'Encadrant')], default='etudiant', max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activite',
            fields=[
                ('code_activite', models.CharField(help_text="Code unique de l'activité (1-5 caractères, lettres majuscules et chiffres).", max_length=5, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(code='invalid_code_activite', message='Le code activité doit contenir entre 1 et 5 caractères alphanumériques majuscules.', regex='^[A-Z0-9]{1,5}$')])),
                ('titre', models.CharField(max_length=255)),
                ('presentation_publique', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('encadrant', models.ForeignKey(limit_choices_to={'role': 'encadrant'}, on_delete=django.db.models.deletion.CASCADE, related_name='activites_crees', to=settings.AUTH_USER_MODEL)),
                ('etudiants_autorises', models.ManyToManyField(blank=True, limit_choices_to={'role': 'etudiant'}, related_name='activites_autorisees', to=settings.AUTH_USER_MODEL)),
                ('affirmations_associes', models.ManyToManyField(blank=True, related_name='activites', to='api.affirmation')),
                ('destine_a', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.categorie')),
            ],
        ),
        migrations.CreateModel(
            name='Reponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reponse_vf', models.BooleanField(blank=True, help_text='Réponse pour affirmation Vrai/Faux (True/False).', null=True)),
                ('reponse_choisie_qcm', models.IntegerField(blank=True, choices=[(1, 'Option 1'), (2, 'Option 2'), (3, 'Option 3'), (4, 'Option 4')], help_text='Réponse choisie pour affirmation QCM (1-4).', null=True)),
                ('justification', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('activite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.activite')),
                ('affirmation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.affirmation')),
                ('etudiant', models.ForeignKey(limit_choices_to={'role': 'etudiant'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('activite', 'affirmation', 'etudiant')},
            },
        ),
        migrations.CreateModel(
            name='Debrief',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField()),
                ('encadrant', models.ForeignKey(limit_choices_to={'role': 'encadrant'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reponse', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.reponse')),
            ],
        ),
    ]
